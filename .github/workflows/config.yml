name: UI Tests # Название workflow для удобства отображения в GitHub Actions

on: [ push ] # Запуск workflow при пуше в репозиторий

jobs:
  ui-tests:
    runs-on: ubuntu-latest # Используем виртуальную машину с Ubuntu

    steps:
      # Копирование репозитория из ветки main на runner
      - uses: actions/checkout@v2

      # Шаг 1 - Копируем gh-pages на раннер
      # Копируем ветку gh-pages в папку ./.github/gh-pages для использования истории Allure
      - name: Copy gh-pages repo to runner
        uses: actions/checkout@v2
        with:
          ref: gh-pages # Указываем ветку gh-pages
          path: ./.github/gh-pages # Путь для сохранения файлов

      # Шаг 2 - Подготовка окружения в Allure-отчете
      # Создаем environment.properties и executor.json для отображения информации в отчете
      - name: Prepare Allure environment
        run: |
          mkdir -p allure-results # Создаем папку для результатов Allure
          echo "Branch=${GITHUB_REF_NAME}" > allure-results/environment.properties # Указываем текущую ветку
          echo "Commit=${GITHUB_SHA}" >> allure-results/environment.properties # Указываем SHA коммита
          echo "Browser=${{ vars.BROWSER }}" >> allure-results/environment.properties # Браузер из переменных
          echo "Stage=${{ vars.STAGE }}" >> allure-results/environment.properties # Стадия (Stage) тестов
          echo "{\"name\": \"GitHub Actions\", \"type\": \"github\", \"url\": \"${{ github.server_url }}/${{ github.repository }}\", \"buildOrder\": ${{ github.run_number }}, \"buildName\": \"${{ github.run_id }}\", \"buildUrl\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\", \"reportUrl\": \"https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/\", \"reportName\": \"Allure Report\"}" > allure-results/executor.json # Добавляем метаданные о сборке

      # Шаг 3 - Запуск тестов
      # Поднимаем контейнеры для тестов через Docker Compose
      - name: Run tests via docker-compose
        env:
          BROWSER: ${{ vars.BROWSER }} # Браузер из переменных
          STAGE: ${{ vars.STAGE }} # Стадия (Stage) тестов
          LOGIN_DOCKER: ${{ secrets.LOGIN_DOCKER }} # Логин
          PASSWORD_DOCKER: ${{ secrets.PASSWORD_DOCKER }} # Пароль
        run: |
          docker compose up tests # Запускаем контейнер с тестами

      # Шаг 4 - Копирование истории
      # Копируем историю отчетов из gh-pages в папку allure-results
      - name: Copy Allure history
        run: |
          mkdir -p allure-results/history # Создаем папку history, если она отсутствует
          if [ -d "./.github/gh-pages/history" ]; then # Проверяем наличие истории
            cp -R ./.github/gh-pages/history/* allure-results/history/ # Копируем историю
          fi

      # Шаг 5 - Генерация отчета
      # Создаем Allure-отчет с помощью Docker Compose
      - name: Generate Allure-report
        env:
          BROWSER: ${{ vars.BROWSER }} # Браузер из переменных
          STAGE: ${{ vars.STAGE }} # Стадия (Stage) тестов
          CI_COMMIT_REF_NAME: ${{ github.ref_name }} # Имя ветки
          CI_COMMIT_SHORT_SHA: ${{ github.sha }} # SHA коммита
        run: |
          docker compose up report # Генерация Allure-отчета

      # Шаг 6 - Деплой на gh-pages
      # Публикуем Allure-отчет на GitHub Pages
      - name: Deploy to Github Pages
        uses: JamesIves/github-pages-deploy-action@4.7.0
#        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          token: ${{ secrets.CI_TOKEN }} # Токен для аутентификации
          branch: gh-pages # Ветка для деплоя
          folder: allure-report # Папка с отчетом
          clean: false # Не очищаем старый контент
